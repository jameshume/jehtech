REF -- https://www.udemy.com/course/the-complete-javascript-course/learn

JAVASCRIPT INTERTALS
====================

JavaScript hosted in an enironment. E.g. your browser, or nodejs.

The host, has a Javascript engine that takes the code and executes it. E.g. of engines include
Google V8, rhINO,and Spider Monkey to name just a few.

All JS code must run inside something... this is the execution context. It is a "wrapper" or
"container" of sorts, that stores variables and in which a piece of code is evaluated and runs.

	See http://dmitrysoshnikov.com/ecmascript/chapter-1-execution-contexts/.

		From SO - https://stackoverflow.com/a/9384894/1517244 and https://stackoverflow.com/a/7722057/1517244
		Execution context is a concept in the language spec that, in layman's terms, roughly equates to
		the 'environment' a function executes in; that is, variable scope, function arguments, and the
		value of the this object. The context stack is a collection of execution contexts.

		Execution context is different and separate from the scope chain in that it is constructed at the
		time a function is invoked (whether directly – func(); – or as the result of a browser invocation,
		such as a timeout expiring). The execution context is composed of the activation object (the
		function's parameters and local variables), a reference to the scope chain, and the value of this.

		The call stack can be thought of as an array of execution contexts. At the bottom of the stack is
		the global execution context. Each time a function is called, its parameters and this value are
		stored in a new 'object' on the stack.


	From the Spec, with some - https://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf:
		An execution context is a specification device that is used to track the runtime evaluation of
		code by an ECMAScript implementation.

		At any point in time, there is at most one execution context per agent that is actually executing
		code. This is known as the agent's running execution context. All references to the running execution
		context in this specification denote the running execution context of the surrounding agent.

		The execution context stack is used to track execution
		contexts. The running execution context is always the top element of this stack. A new execution
		context is created whenever control is transferred from the executable code associated with the
		currently running execution context to executable code that is not associated with that execution
		context. The newly created execution context is pushed onto the stack and becomes the running
		execution context.

		An execution context contains whatever implementation specific state is necessary to track the
		execution progress of its associated code. Each execution context has at least these state
		components:
			1. Code evaluation state
				All state needed to perform, suspend, and resume evaluation of the code
				associated with this execution context
			2. Function.
				If this execution context is evaluating the code of a function object, then the
				value of this component is that function object. If the context is evaluating the
				code of a Script or Module, the value is null.
			3. Realm
				The Realm Record from which associated code accesses ECMAScript resources.
			4. Script or Module
				The Module Record or Script Record from which associated code originates. If there
				is no originating script or module, as is the case for the original execution context
				created in InitializeHostDefinedRealm, the value is null.

		Execution contexts for ECMAScript code have these additional state components:
			5. Lexical Environment
				Identifies the Lexical Environment used to resolve identifier references made by code within
				this execution context.
			6. Variable Environment
				Identifies the Lexical Environment whose EnvironmentRecord holds bindings created by
				VariableStatements within this execution context.


The DEFAULT EXECUTION CONTEXT is the GLOBAL EXECUTION CONTEXT
	- Code not inside any function
	- Associated with the global object (e.g., Window if running in a browser)

		Also, callbacks from from things like timeouts execute in the GLOBAL execution context.

		In the browser console type...
			> var b = 39393939393;
			< undefined
			>
			> b
			< 39393939393
			> # Now we can see that code in the global execution context belongs to the global object, which
			> # for a browser, is the window object.
			> window.b
			< 3939393939 

		Same with functions, for example...
			> function JEH() { var a; }
			< undefined
			> JEH
			< f JEH() { var a; }
			> window.JEH
			< f JEH() { var a; }
			
	
EXECUTION CONTEXT OBJECT: 2 phases: creation and then execution.
   |
   +---- Variable Object
   |     Code is scanned at load time for function declarations. For each function an entry into the VO is made that records
   |     things like the arguments passed into the function. Also done for variables, which are added as properties to the
   |     VO and initially set to undefined. This is refered to as HOISTING - they are available before the execution phase
   |     starts, which is why we can write:
   |           my_func();
   |           ...
   |           function my_function() { ... }
   |
   |     Note, how this wouldn't work if we used a function variable, because although the VARIABLE my_func is hoisted,
   |     it is hoisted and undefined (until it is defined lol).
   |           my_func(); # Can't call undefined
   |           var my_func = function { ... };
   |
   |
   |     Another example of variable hoisting...
   |  	       function b() {
   |	       	    console.log(bbb); // OK: bbb is defined in environment VO, with a value of undefined
   |		    var bbb = 10;
   |	       }
   |	       b(); // Outputs "undefined"
   |
   |	       function c() {
   |		   console.log(ccc); // ERROR: ccc is not defined (not in environment VO)
   |		   ccc = 10;
   |	       }
   |	       c(); // Raises a ReferenceError exception!
   |
   +---- Scope Chain
   |           Scoping determines where, in terms location in the code, a variable is accessed. A variable scoped locally to a function
   |           can be accessed within that function, but not in the scope outside that function for example. However, a function A closed
   |           by another function B, can access variables in B's scope. Or a normal function can access variables from the global scope.
   |
   |           JS is lexically scoped which means that scope is determined by somethings position in the code.
   |
   +---- "This" variable.
               Set in the creation phase.
               What "this" refers to depends on the context. In the global context it refers to the global object (window for browsers).
               In a regular function context it also refers to the global object.
               For a method call this points to the object that is calling the method.

               NOTE: This is not assigned a value until a function where it is defined is actually called, Thus, "this" is NOT
                     lexically scoped!

               E.g.:
                   function test1()
                   {
                      console.log(this);
                   }
                   test1(); // Outputs Test1 == [object Window]

                   var test2 = {
                      my_method: function() {
                         console.log("Test2 == " + this);

                         function test3() {
                            console.log("Test3 == " + this);
                         }

                         test3();
                      },
                   };
                   test2.my_method(); // Outputs Test2 == [object Object]
                                      //         Test3 == [object Window] << NOTE: MAY SURPRISE YOU!


EXECUTION STACK = order in which functions are called
SCOPE CHAIN = order in which functions are written in the code - i.e. their lexical relationship to one another.
Thus the execution stack does NOT define where variables can be accessed... it is the scope chain that does this! The execution context
will store the scope chain, but do not effect the scope chain.




PROMISES
========

Callback hell
-------------
   function get_pr_requests(account_details) {
       ask_server_for_pr_reqs(
           server_address,
           account_details,
           (status, pr_list) => {
               if (status == OK) {
                   pr_list.map( pr_item => {
                       ask_server_for_pr_details(
                           server_address,
                           account_details,
                           (status, pr_deets) => {
                               ask_server_for_files(
                                   ...,
                                   (status, file_list) => {
                                       file_list.map( file => {
                                           ask_server_for_file(
                                               ...
                                               (status, file) => {
                                                   .... and so one ... nesting deeper and deeper!
                                               }
                                           )
                                       })
                                   }
                               )
                           }
                       )
                   })
               }
           }
       );
   }

This continual nesting of functions makes it very hard to read and understand this code. This
triangular shape of continuall nested callbacks is what is refered to as callback hell. Without the
ES6 arrow function it would look even worse as the binding of the "this" keyword would also need
to be managed!


Promises to the rescue (>=ES6)
-------------------------------
Promise:
    - Object that keeps track about whether a certain event has happened already.
    - Determines what happens after the event has happened
    - Implements the concept of a future value that we are expecting


Promise states:
    PROMISE PRODUCED
       |
       |
       v
    PENDING ---event---> SETTLES/RESOLVED ---succcess---> FULFILLED
                                |
                                +------------failure----> REJECTED


JS:
   const my_promise = new Promise( executor );
                                   ^^^^^^^^
                            This is a function that is called as soon as the promise is
                            created

                            The executor function takes two arguments:
                                 1. A CALLBACK function for when the executor wants to inform the
                                    promise that the event it was handling was succcessfull. I.e.,
                                    it wants to RESOLVE the promise. It takes one argument, which
                                    is the result that the promise should return (the future
                                    value that was expected).
                                 2. A CALLBACK function for when the executor wants to inform the
                                    promise that the event it has handling failred. It wants to
                                    REJECT the promise.


   EG:
      //
      // CREATE a promise
      //
      const get_pr_requests = new Promise((resolve, reject) => {
         ask_server_for_pr_reqs()
             server_address, account_details,
             (status, pr_list) => {
                  if (status == OK) { resolve(pr_list); }
                  else { reject(status); }
             }
         )
      });

      // Create another promise
      const get_pr_deets = pr_id => {
          return new Promise( (resolve, reject) => {
              ask_server_for_pr_details(
                 ...,
                 (status, pr_deets) => {
                     if (status == OK) { resolve(pr_deets); }
                     else { reject(status); }
                 }
          });
      };

      //
      // CONSUME a promise by using then() and catch() methods.
      // then() is the callback to execute when the promise is RESOLVED
      // catch() is the callback to execute when the promise is REJECTED
      //
      get_pr_requests.next( pr_list => {
          // The promise was RESOLVED - it completed successfully.
          return get_pr_deets(pr_list[0]); // Return a NEW PROMISE allows us to CHAIN promises
                                           // (rather than using the previous pattern of continually
                                           // nesting callbacks, which is what lead to callback hell)
      }).next( (pr_deets) => {
          // Handle the promise returned by the previous next() - this is CHAINING!
      }).catch( error => {
          // The promise was REJECTED
          console.log(error);
      });


ASYN / AWAIT (>= ES8)
======================

Makes it easier to _consume_ promises. The promise creation still remains the same...

    async function func_name(...) { ... } // New type of JS function that us asynchonrous

An async function keeps running the the background, and importantly only in async functions can
await's be used. Importantly, like the previous promise consumption, the call to the asyn function
does not block... instead it just chuggs away in the background.

    // The function will keep executing in the background. An await will block until the promise
    // is fulfilled.
    async function load_pr_stuff() {
        try {
           const pr_reqs = await get_pr_requests; // CONSUME promise using await.
           //    ^^^^                             // instead of .next()
           //    ^^^^
           //    pr_reqs gets the result of the promise.
 
           const pr_deets = await get_pr_deets(pr_reqs[0]); // Like the chained .next() above.
        }
        catch (error) {
           // Any REJECT is caught as an error.
           console.log(error); // Handle the error somehow
        }
    }

This turns a ton of callbacks or chained promisises into something like looks a lot more proceedural
and is therefore a lot easier to grok! NICE NICE NICE!

An async function returns a promise. So if, inside the async you return something of interest, you
can get at it using the .next() method:
       load_pr_stuff().next(...)



AJAX WITH PROMISES AND AWAIT
============================

Can use XMLHTTPRequest interface.

There is a newer version of this called FETCH. XMLHttpRequest has better browser support because it
is older, but FETCH is more modern.

    fetch(URL) // Returns a promise... yay!

If you see error containing "No-Access-Control-Allow-Origin" it is talking about a JS policy that
prevents a page making AJAX requests to a domain different to its own domain.

Cross-Origin Resource Sharing (CORS). See https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS.
    "
     Cross-Origin Resource Sharing (CORS) is a mechanism that uses additional HTTP headers to tell
     browsers to give a web application running at one origin, access to selected resources from a
     different origin. A web application executes a cross-origin HTTP request when it requests a
     resource that has a different origin (domain, protocol, or port) from its own...

     ...For security reasons, browsers restrict cross-origin HTTP requests initiated from scripts.
     For example, XMLHttpRequest and the Fetch API follow the same-origin policy. This means that a
     web application using those APIs can only request resources from the same origin the
     application was loaded from unless the response from other origins includes the right CORS
     headers.
    " 

Can use a proxy to get around this - e.g., 
    crossorigin.me - it is a CORS proxy that you can use for free
To use prefix the URL of the API end-point you are using with "https://crossorigin.me/".
Eg, to use the metaweather free API, which does not implement CORS use:
    fetch("https://crossorigin.me/https://metaweather.com/api/location/<num>").next(...)...;

So, to continue with FETCH:
    fetch(URL).next( result => {
        console.log(result);
        return result.json(); // Returns a promise that should resolve to the JS object created
                              // from the JSON string returned by the API.
    }).next( jsonObj => {
        // Do something with the returned data which is now represented as a JS object for us.
    }).catch ( error => {
        console.log(`It failed due to ${error}`);
    });

Or... use away:
    async function load_pr_stuff() {
        const result = await fetch(URL);
        const data = await result.json();
        return data; // < Returns a promise!
    }

    load_pr_stuff.then( data => console.log("The final data is " + data) );
    // ^^^
    // Remember this is the way to get the final promise returned by the async function