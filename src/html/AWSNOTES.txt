===================================================================================================
===================================================================================================
IAM - Identity Access Management
===================================================================================================
	- See https://d0.awsstatic.com/whitepapers/Security/AWS_Security_Best_Practices.pdf

	- For management of users and their access level to AWS console.
	- Centralised control of AWS account
	- Shared access
	- Granular permissions
	- Multifactor authentication
	- Integrates with AWS services

	- Groups - Collection of users with common permission set.
	- Roles - Define set of permissions that can be assigned to AWS resources/entities.
		Secure way to grant permissions to entities that you trust. Ex, IAM user in another account
		or application code running an an EC2 instnace that needs to permorm actions on AWS
		resources etc.
		E.g.: Give an EC2 instance permissions to write a file to an S3 bucket.
			Create role.
			Select the service that the role will use - EC2 instance in this example.
			Attach the S3 policy of choice, e.g. write access, to the role.
			This role can then be applied to any new EC2 instance created.

	- Policies - Document that defines >= 1 permissions that can be assigned user, groups, or roles.

	- In console access under "Security, Identity and Compliance"

	- When creating users you will have
		- User name
			For AWS console login.
		- Access key ID
			For PROGRAMATIC access. i.e., via CLI, scripts etc.
		- Secret Access Key.
			For PROGRAMATIC access. i.e., via CLI, scripts etc.
			This will only be displayed once. You can download as a CSV if you can keep it securley.
			Note, once the secret has been hidden you canNOT access it again. You would have to
			generate a new key.
		- Password
			For AWS console login.



===================================================================================================
===================================================================================================
Going Serverless
===================================================================================================

Lambdas
-------

See https://aws.amazon.com/lambda/faqs

EC2 launced in 2006. At time of writing it is 14 years old! Infrastructure as a service!

Serverless means you don't need to control the server, you don't need to provision the hardware or
worry about the OS its running - its no longer something you need to worry about. Also don't have to
worry about scaling and response to load and keeping them running etc.

Lambda allows you to use your code without any need to provision servers, install software, deploy
containers or worry about any low level details and can parallelize code. All this is taken care of
for you. E.g. Alexa is using Lambdas every time you make an Alexa query.

So, don't need any EC2 instances, and EBS instances etc etc - THERE IS NOTHING TO MANAGE!

Use:
	- Event driven compute service - WAS Lambda runs code in response to events, e.g. changes to
		data in S2 bucket or DynamoDB table.
	- Compute service - run code in response to HTTP requests using Amazon API gateway or API calls
		made using AWS SDKs. This can be massively parallel - many requests launch many Lambdas,
		which all use the same code but represent difference request instances with associated
		data etc.

		Each AWS Lambda function runs in its own isolated environment, with its own resources and
		file system view. AWS Lambda uses the same techniques as Amazon EC2 to provide security and
		separation at the infrastructure and execution levels.

AWS Lambda natively supports Java, Go, PowerShell, Node.js, C#, Python, and Ruby code, and provides
a Runtime API which allows you to use any additional programming languages to author your functions.

Priced on #requires and duration.


Configure A Lambda Function
---------------------------

- Click - Services > Compute > Lambda > Create Lambda Function.
- Create from scratch - Add name and platform. If you've not used Lambda before will need to create
  a new role to give Lambda permission to execute. Use policy "Simple Microservice Permissions".
- Click "Create function" .
- Paste in your Lambda code.
- Add your trigger... can be sooo many things: including but no where near limited to API Gateway,
  CloudFront, S3, DynamoDB, and more...
- 
- TODO COMPLETE ME!


API Gateway
-----------

Amazon API Gateway 0 full managed service - publish APIs at any scale to act as "front door" for
apps to access data etc from back-end services, such as apps on EC2 instances, code on Lambdas etc.

- Expose HTTPS enpoints to define a RESTful API
	API gateway gives us a HTTPS address to make API calls to, and then configure how the API
	responds to those calls - e.g. get data from a DynamoDB or fire off a Lambda etc etc to
	return the response.
- Lets you serveless-ly connect to services like Lambda & DynamoDB.
- Can send each API endpoint to a different target.
- Run efficiently with low cost & scales effortlessley.
- Can track and control usage with API key.
- Can throttle requests to prevent attacks.
- Can maintain multiple versions of your API

How to configure?
	- Define an API (container)
	- Define Resources and nested Resources (URL paths)
	- For each resource:
		- Select supported HTTP methods, POST, GET etc etc
		- Set security
		- Choose target- EC2 Lambda etc
			- Set resquest & response transformations
	- Deploy API to a Stage
		- Use APU Gateway domain by default but you can use your own to hide the fact its AWS
		- !!!Supports AWS Certificate Manager: free SSL/TLS certs!!! WOO!!!


API Caching In API Gateway: can enable API caching. Caches enpoint's response to reduce # calls to
endpoint for repeated requests. Also improves latency.

Need to be aware of XSS and CORS


Simple Serverless Website Using Route53, API Gateway, Lambda and S3
-------------------------------------------------------------------
Domain name in Route53 and bucket name need to be the same. They MUST BE THE SAME (toplevel exluding
the .com).

Must enable static website hosting for bucket.

If you don't want to spend money on AWS domain you can just use the S3 bucket address,


TODO - Complete ME!


===================================================================================================
===================================================================================================
Proxies And Reverse Proxies
===================================================================================================



===================================================================================================
===================================================================================================
Elastic Compute Cloud (EC2)
===================================================================================================
Stands for Elastic Compute Cloud, abreviated to EC2.
Web service providing resizeable compute capacity in the cloud. Virtual machines in a cloud.
Pay only for capacity you use - don't have to (over) provision your own kit.
Isolate from common failure scenarious.


EC2 Options
-----------
	- On demand - fixed rate per hour/second with no commitment, no upfront payment. Good for app dev
		or apps with short term, spiky, unpredictable workloads that cannot be interrupted.
	- Reserved - capacity reservation - pay up front. Good disacounts on hourly charge for and intance.
		One to three year term.
		Apps with steady state or predictable usage.
	- Spot - Allows bidding
		Apps that have very flexible start and end times
		For apps that are only feasible at very low compute prices.
		E.g. use compute during off-peak times for cheaper compute cost.
	- Dedicated hosts - Physical EC2 server for your use only.
		Regulatory requirements that do not alow multi-tenant virtulization
		Licensing which does not support multi-tenancy.


EC2 Instance Types
-------------------
	There are different "families" of instance types that provide optimisations for specific
	requirements like hight speed storage, or memory space, or compute power etc.

	Families include.
		FPGA, High Speed Storage, Graphics Intesive, High Disk Througput, Low Cost,
		Dense Storage, Memory Optimized, General Purpose, Compute optimize, GPU etc.

	You will mostly use - T2 = Lowest cost, general purpose - Web Servers and Small DBs


Elastic Block Store (EBS)
-------------------------
	EBS allows you to create storage volumes and attach them to Amazon EC2 instances.
	Once attched, can create FS on top of these volumes, run DBs etc etc.
	Protect you from failure of single component.

	Types: General Purpose SSD (GP2),  Provisioned OPS SSD(IO1), Throughput Optimized HDD (ST1)
	       Cold HDD (SC1).


Elastic Load Balancer (ELB)
---------------------------
	Types Of Load Balancers
		- Application Load Balancer.
			OSI Layer 7. Can make very clever decisions based on application level logic.
			Application Load Blancers are best suited for load balancing of HTTP and HTTPS
			traggic. They operate at Lyer 7 and are application-aware. They are intelligent,
			and you can create advanced request routing, sending specified requests to
			specific web servers.
		- Network Load Balancer.
			Most expensive option. Works at OSI layer 4 (surely 3?!). Fast performance!
			Best suited for load balancing of TCP traffic where extreme performance is required.
			Operating at the connection level (Layer 4 - which I think is the transport layer
			not the network layer, need to double check that), network Load Balancers are
			capable of halding millioos of requests per secon, while maintaining ultra-low
			latencies. use for EXTREME PERFORANCE.
		- Classic Load Balancer (ELB)
			No longer recommended. Lagacy!
			Legacy Elastic Load Blanacers. Can ballance layer 7 or 4, but layer 7 is not as
			intelligent as application load balancer.
			If your app stops responding ELB returns a 504 error.

	The laod balancer is an extra layer that will "hide" the public IP address of the entity accessing
	your server. To get the public IP look in the "X-Forwarded-For" header to see the public IP addr.

	To create a load balancer go back to your EC2 instance and select, in the left hand menu
	pane, LOAD BALANCING > Load Balancers. Then click the "Create Load Balancer Button". Create the
	HTTP(S) balancer.
		Assign a security group.
		Configure Routing.
			Create new target group on HTTP port 80.
			Add /index.html as the health check item.
		Register targets
		Review
		Create


Route53
-------
	- Amazon's DNS service
	- Allows mapping of domain names to EC2 instances, load balancers and S3 buckets.
	

	- Log into AWS console, then Services > Network > Route 53
	- Click Domains > Registered domains
		Click "Register Domain". Select a domain and choose a name. Add it to your cart and
		click "Continue"
	- Fill in registrant information
	- Domain registration can take up to 3 days to complete.

	- Click Dashboard > "hosted zones" 
		Should see our registers domains.
		Click "Goto record sets" to create our DNS records.
			Create "A" record. Says where you're domain is going to go.
				There are lots of record set type you can choose. An "A" record points to an
				IPv4 address, and "AAAA" record points to an IPv6 address etc.

				Create a type "A" record set. Use the NAKED DOMAIN NAME - that is the name without
				the "www." prefix. This is also sometimes refered to as the "zone apex record". In
				order to do this HAVE TO USE AN ALIAS. You create an alias for the zone apex. Aliases
				are only supported by DNS record types A and AAAA.

				Pick the alias target - it can be for an S3 website, an ELB website, Elastic
				Beanstalk, CloudFront etc. 

				This is why we needed to setup the ELB... doesn't seem to support directly using an
				EC2 instance. Thus MUST CREATE ELB THEN PUT AN EC2 INSTANCE BEHIND THE ELB.

				Select your ELB from the target list and hit create :)

		From Wikipedia:
			A Canonical Name record (abbreviated as CNAME record) is a type of resource record in
			the Domain Name System (DNS) which maps one domain name (an alias) to another
			(the canonical name).[1]
			...
			Also referred to as a CNAME record, a record in a DNS database that indicates the true,
			or canonical, host name of a computer that its aliases are associated with.
			...
			When referring to IP addressing, canonical means the authoritative host name stored in
			a DNS database that all of an IP address' aliases resolve to.

		From AWS Certified Solutions Architect Practive Tests Book:
			A zone apex record is a DNA record at the root, or apex, of a DNS zone. So amazon.com
			is an apex record (sometimes called a naked domain record).

		From NS1.com:
			DNS servers create a DNS record to provide important information about a domain or
			hostname, particularly its current IP address. The most common DNS record types are:
				- Address mapping record (A Record) - a.k.a DNS host record, stores hostname and its
				  corresponding IP4 address
				- IP Version 6 Address record (AAAA Record) - stores a hostname and its corresponding
				  IPv6 address.
				- Canonical Name record (CNAME Record) - can be used to alias a hostname to another
				  hostname. When a DNS client requests a record that contains a CNAME, which points
				  to another hostname, the DNS resolution process is repeated with the new hostname.
				- Mail exchanger record (MX Record) - specifies an SMTP email server for the domain,
				  used to route outgoing emails to an email server.
				- Name Server records (NS Record) - specifies that a DNS Zone, such as "example.com"
				  is delegated to a specific Authoritative Name Server, and provides the address of
				  the name server.
				- Reverse-lookup Pointer records (PTR Record) - allows a DNS resolver to provide an
				  IP address and receive a hostname (reverse DNS lookup).
				...
				...


This can prove convenient when running multiple services (like an FTP server and a web server, each 
running on different ports) from a single IP address. One can, for example, point ftp.example.com
and www.example.com to the DNS entry for example.com, which in turn has an A record which points to
the IP address. Then, if the IP address ever changes, one only has to record the change in one place
within the network: in the DNS A record for example.com.


Setup Simple Webserver
-----------------------
	- From console goto Services > Compute > EC2
	- Click on "Launch Service" button.
	- This will start us on the journey to launching first instance. instances are created from
	  Amazon Machine Images (AMIs).
	- Select an AMI of your choice and then choose the type of this instance you want. Here you
	  select the family type talked aboute in the section above, "EC2 Instance Types". I will want
	  a T2 instance, probably one eleigable for the free teir.
	- Choose it, eg "T2 micro" and click the NEXT button to go and configure the instance details.
	- Then add tags.
	- Configure security groups. This is like a "virtual firewall" where you can specify what
	  traffic you allow in and out of your instance. So for websever, for e.g. we need to enable port
	  80 for TCP.
		- Create a new security group most porbably and give it a name.
		- Allow SSH to remote adminthe EC2 instance.
		- Allow HTTP access, (and HTTPs access if you need it)
	- Click "Review and Launch" and review details.
	- Click "Launch"
		Need to either add or create a key pair that will allow you to access the instance.
		We store the private key somewhere locally and SECURELY
		The public key is stored by AWS
		NEVER SHARE THE PRIVATE KEY otherwise anyone can access the server!
		Name the key pair and then download it, saving it somewhere safe and secure.
	- Click "Launch Instance"
		Can take a little time for instance state to say "running". Once running it will give
		you your public IP address, which you can then use.

		Go to directory with your downloaded key pair
		Change permissons. needs to be quite locked down to use with EC2:
			chmod 400 MyNewKerPair.pem
			ssh ec2-user@<servier-ip-from-console> -i MyNewKeyPair.pem
				Inside ssh session
					sudo su
					yum update -y #Or use apt depending on server version used
					
					# install apache
					yum install httpd -y

					# start it
					service httpd start

					# make sure apache auto boots on restart
					chkconfig httpd on

					# See service status
					service httpd status

					# Create stub web page
					echo "<html><body>HELLO</body></html>" > /var/www/html/index.html


How To Install LetsEncrypt SSL Certificate in AWS EC2 Instance Notes
--------------------------------------------------------------------
Ref: https://www.youtube.com/watch?v=odtG8Cjshvo
See: https://letsencrypt.org/getting-started/, https://certbot.eff.org/


How to Setup SSL certificate in CentOS 7 using LetsEncrypt Notes
----------------------------------------------------------------
Ref: https://www.youtube.com/watch?v=qYWhuITSVMc&feature=youtu.be
See: https://letsencrypt.org/getting-started/, https://certbot.eff.org/



===================================================================================================
===================================================================================================
S3
===================================================================================================




===================================================================================================
===================================================================================================
Elastic Beanstalk
===================================================================================================

What Is It?
-----------

Elastic Beanstalk is a service for deploying and scaling web applications developing in many
popular languages: Java, .NET, PHP, Node.js, Python, Ruby, Go and Docker onto widely used
application server platforms like Apache Tomcat, Nginx, Passenger, and IIS.

From AWS:
	Amazon Web Services (AWS) comprises over one hundred services, each of which exposes an area of
	functionality. While the variety of services offers flexibility for how you want to manage your
	AWS infrastructure, it can be challenging to figure out which services to use and how to
	provision them.

	With Elastic Beanstalk, you can quickly deploy and manage applications in the AWS Cloud without
	having to learn about the infrastructure that runs those applications. Elastic Beanstalk
	reduces management complexity without restricting choice or control. You simply upload your
	application, and Elastic Beanstalk automatically handles the details of capacity provisioning,
	load balancing, scaling, and application health monitoring.

Developers can focus on writing code and don't need to worry about any of the underlying
infrastructure needed to run the application.

"Throw it some code in a ZIP file and it will figure it out and configure an environment for you".

Upload the code and EB handles deployment, capacity provisioning, load balancing, auto-scaling and
app health.

You retain full control of the underlying AWS resource pwoering your app and you pay only for the
AWS resource required to store and run you app, e.g. the EC2 instances or S3 buckets etc.

In summary:
	- Fastest/simplest way to deply app in AWS.
	- Scales resources up and down for you including web application server platform.
	- EC2 instance type is selectable for opimization.
	- Managed platform updates auto applies to OS and Java/PHP/NodeJS etc etc.

EB v.s. CloudFormation - EB configure environment through a GUI, CF is scripted config.

Beanstalk Update/Deployment Options
-----------------------------------
	Beanstalk supports several options for processing deployments (deployment policies):
	- All at once:
		- Deploys the new version to all instance simultaneously
		- All of your instances are out of service while the deployment takes place.
		- You will experience an outage while the deployment is taking place.
		- If the update fails, you need to roll back the changes by re-deploying the original
		  version to all you instances.

	- Rolling Deployment Policies:
		- Deploys in batches: each batch taken out of service whilst deployment takes places
		- Environment capacity will be reduced by the #instances in a batch while the deployment
		  takes place.
		 - If update fails, need to roll back the changes via rolling update.
		 - Reduced capacity during deplayment but not an outage.

	- Rolling wwith Additional Batch deployment Updates.
		- Maintains full capacity during deployment process.
		- Launches an addition batch of instances before deploying new instances.

	- Immutable Deployment Updates;
		- Deploys new version to a fresh group of instances in new group. On success moved to
		  the existing group, and old instances killed.
		- Perferred option for Mission Critical stuff.


How To Deploy Apps
------------------
	Compute > Elastic Beanstalk
	Click "Get Started"
	Create a web app
		- Spec name and platform and the option "Upload your code" rather than "Sample application",
			which is the default
		- Click "Create application"
		- Select how to load the code
			- Can be a local file (ZIP) or an S3 bucket.
			- If you choose to upload a local file, it will create an S3 bucket automatically for
				you and stash the ZIP there. I was suprised that it doesn't unzip the archive, it
				just stashes it.
		- Once you click "Create Application" and environment will be created for your app.
			If the app was called HelloWorld then the environment is labeled HelloWorld-env.
			The creation can take up to 5 or 6 minutes so be patient.
		- When the environment reports itself as successfull launched, in the breadcrumb links
			select "Applications" to view a list of all applications. Here you should see your
			new environment, which you can click on to "drill into it".
		- From the application env you should be able to see recent events and a URL to the
			website that was created.
		- From the EBS environment page you can also select from the side menu "Configuration".
			This is how the environment can be configured. From here you can access security,
			instances, configure load balacncers, capacity etc and apply these configurations.

	Further Config/Update
		- Use the breadcrumbs to go back to the "all applications" page and select "application
			versions". It will show you the cuurent source and date it was deployed.
		- Can upload new version by clicking on the "Upload button".
			- If you are using an S3 bucket you can navigate to the S3 bucket management console and
				view the contents. Inside you will see all the code ZIPs you ever uploaded as well
				as a .elasticbeanstalk file and resources directory.
			- The new version becomes visible but HAS NOT BEEN DEPLOYED to an environment.
			- You can change your deployment policy to the ones described in the previous section.
			- Click DEPLOY to deploy you new version.


Configuring Elastic Beanstalk
-----------------------------
Environment can be customized using config files - spec packages to install, user groups, shell cmds
to run etc etc). Files written in YAML or JSON and have a ".config" suffic and be saved in the
folder ".ebextensions", which must be included in the top-level directory of the app source code
bundle. Thus, config files can be placed under source control with the rest of the app code.

See also: https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/ebextensions.html


AWS "Getting Started" Elastic Beanstalk Tutorial
------------------------------------------------
Ref: https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/GettingStarted.CreateApp.html


Terminating HTTPS on EC2 instances running Ruby
-----------------------------------------------
https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/https-singleinstance-ruby.html
https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/configuring-https.html
https://medium.com/@jameshamann/ssl-certificates-with-rails-aws-elastic-beanstalk-and-lets-encrypt-8b047d527a60


How to deploy a smashing dashboard to AWS Elastic Beanstalk with Docker
-----------------------------------------------------------------------
Ref: https://ngeor.com/2017/05/09/how-to-deploy-a-smashing-dashboard-to-aws-elastic-beanstalk-with-docker.html
Meh.


Deploying Ruby Applications to AWS Elastic Beanstalk with Git
-------------------------------------------------------------
Ref: https://aws.amazon.com/blogs/developer/deploying-ruby-applications-to-aws-elastic-beanstalk-with-git/

EBS is clever - Gems listed in the Gemfile are AUTOMATICALLY INSTALLED FOR YOU. 

To deploy to EBS must download & install AWS Elastic Beanstalk command line tool. Get the install
scripts from GitHub:
	1. Make sure the following apps are installed:
			sudo apt install -y build-essential zlib1g-dev libssl-dev libncurses-dev libffi-dev \
				libsqlite3-dev libreadline-dev libbz2-dev
	2. Clone https://github.com/aws/aws-elastic-beanstalk-cli-setup 
			git clone https://github.com/aws/aws-elastic-beanstalk-cli-setup.git
			sudo ./aws-elastic-beanstalk-cli-setup/scripts/bundled_installer
	   Running the install script takes a-g-e-s to install Python, so be patient. It doesn't give
	   you any indication of progress :/

1. Initialize application with the CLI tool by typing:
       eb init
   You will need your AWS acces key ID and secret access key to login.
   Creates .elasticbeanstalk directory in project root. Add to .gitignore.

   This also creates a Git subcommand - `aws.push`.
   To deploy app can now just type `aws.push`.

2. Start the environment:
       eb start
   Can take minutes - be patient. EBS will be spawning EC2 instances, load balancer etc etc.


Beanstalk With RDS
------------------

RDS = Relational Database Service, which is a web service that makes it easier to set up, operate,
      and scale a relational database in the AWS Cloud. 

Can launch RDS within EBS console
	- Good for development
	- Bad for production
		- DB lifecyle tied to app lifecyle - termination of env terminats DB too.
		- Prefer decouple of RDS instance from EBS env. I.e., launch outseide of EBS.
			- Provides more flexibility.
			- Can then connect multiple environments to same DB.
			- Wide choices of DB types.
			- Can tear down app without interfering with DB.

To connect EBS to outside RDS
	- Req additional Security Group - add to environments Auto Scaling group.
	- Provide connection string config info to app servers (endpoint, pwd etc) using EBS properties.


Configuring HTTPS for your Elastic Beanstalk environment
--------------------------------------------------------

Simplest method = assign a server certificate to your environment's load balancer. Client to load
	balancer secure. Balancer to EC2 instance is not, but is hidden behind balancer so should be
	secure enough? For end-to-end HTTPS in a load balanced environment, can combine instance and
	load balancer termination to encrypt both connections. 

With AWS Certificate Manager (ACM), you can create a trusted certificate for your domain names for
free. BUT domain names are pay-to-own.




===================================================================================================
===================================================================================================
CloudFront
===================================================================================================
See: https://aws.amazon.com/cloudfront/#:~:text=Amazon%20CloudFront%20is%20a%20fast,within%20a%20developer%2Dfriendly%20environment.

From AWS Website:
	Amazon CloudFront is a fast content delivery network (CDN) service that securely delivers data,
	videos, applications, and APIs to customers globally with low latency, high transfer speeds,
	all within a developer-friendly environment.

Another AWS page:
	Amazon CloudFront is a web service that speeds up distribution of your static and dynamic web
	content, for example, .html, .css, .php, image, and media files, to end users. CloudFront
	delivers your content through a worldwide network of edge locations. When an end user requests
	content that you're serving with CloudFront, the user is routed to the edge location that
	provides the lowest latency, so content is delivered with the best possible performance. If the
	content is already in that edge location, CloudFront delivers it immediately. If the content is
	not currently in that edge location, CloudFront retrieves it from an Amazon S3 bucket or an
	HTTP server (for example, a web server) that you have identified as the source for the
	definitive version of your content.


Cloudfront may allow FREE encryption using TLS via the AWS certificate manager.

- Global content deliver network (CDN)
- Application acceleration and optimization
- Distributed scalable integrated security controls
- Optimised for deliver use cases with intelligent caching.
- On-demand, full user control. Cost effective.



===================================================================================================
===================================================================================================
LightSail
===================================================================================================
Lightsail is an easy-to-use cloud platform that offers everything needed to build an app or website,
plus a cost-effective, monthly plan. Ideal for simpler workloads, quick deployments, and getting
started on AWS.

The pricing scheme is way simpler, for example, than EBS. It seems to abstract even further away so
that we don't even have to worry about what EC2 cost model and S3 cost model we'd use etc.


SSL/TLS Certificates In LightSail
---------------------------------
Ref: https://lightsail.aws.amazon.com/ls/docs/en_us/articles/understanding-tls-ssl-certificates-in-lightsail-https

Lightsail uses SSL/TLS certificates to handle encrypted web traffic (HTTPS requests). You can create
certificates, verify domain ownership, and then attach the validated certificates to your Lightsail
load balancer.


===================================================================================================
===================================================================================================
Dynamo Database
===================================================================================================


===================================================================================================
===================================================================================================
CodeCommit / Code Deploy / Code Pipeline
===================================================================================================


===================================================================================================
===================================================================================================
Kinesis
===================================================================================================


===================================================================================================
===================================================================================================
Which AWS Service To Publish A Website?
===================================================================================================

Ref: https://adrianhall.github.io/cloud/2019/01/31/which-aws-service-for-hosting/

Options include:
- Amazon S3
- Amazon S3 + Amazon Cloudfront
- AWS Amplify Console
- Amazon Lightsail
- AWS Elastic Beanstalk
- AWS Elastic Beanstalk + Cloudfront
- AWS EC2 - Do-it-yourself compute / storage / network stack